
# def main_function():
#     """Main function generated by me"""
#     pass 

# print(main_function) #<function main_function at 0x000001C5F81B8A60>
# print(main_function()) # None
# print(main_function.__doc__) # Main function generated by me


# def math_pow(a,b):
#     return a ** b 

# print(math_pow(2,2)) # 4
# print(math_pow(2,10)) # 1024

# print(math_pow(2)) # TypeError: math_pow() missing 1 required positional argument: 'b'
# print(math_pow(2,3)) # 8
# print(math_pow(a=2,b=2)) # 4


# def concat_string(string1, string2,string3=""):
#     return string1 + string2 + string3

# print(concat_string("Baqlajon" , "Apple", "Noutbuk")) # BaqlajonAppleNoutbuk
# print(concat_string("Baqlajon" , "Noutbuk")) # BaqlajonNoutbuk
# print(concat_string("Baqlajon" , "Noutbuk", "Olma")) # BaqlajonNoutbukOlma
# def plus(x,y):
#     return int(x)+int(y) 
# def minus(x,y):
#     return int(x)-int(y) 
# def division(x,y):
#     return int(x)//int(y) 
# def multiple(x,y):
#     return int(x)*int(y) 

# num1 = input("Num 1 ? \n:")
# num2 = input("Num 2 ? \n:")
# ex = input("Operation ? \n:")
# if ex == "+":
#     print(plus(num1,num2))
# elif ex == "-":
#     print(minus(num1,num2))
# elif ex == "/":
#     print(division(num1,num2))
# elif ex == "*":
#     print(multiple(num1,num2))
# else:
#     print("Not supported operator")

# task 1

# 10 ta kompnaiya xodimining ism va familyasi + xarbiy xizmatga borgan bormagani berilgan ro'yhat bor , check_personal nomli funksiya yozing va ushbu royhatdan xarbiy xizmatga borgan ishchilarni alohida royhat qilib saralab yozing 
# input ;  personal = [
#     {
#         "name":"John Doe",
#         "military":True
#     },
#     {
#         "name":"Sara Connor",
#         "military":False
#     },
#     ...
#     ]
# output: result = [
#     {
#         "name":"John Doe",
#         "military":True
#     },
# ]


# def main_func(x):
#     return x ** 2

# var_func = main_func
# print(main_func) # <function main_func at 0x000002974B258A60>
# print(var_func is main_func) # True
# print(var_func(2)) # 4

# *args, **kwargs - arguments , keyword arguments

# a , b , *c = [1,2,3,4,5,6]

# print(a)
# print(b)
# print(c)

# def args_func(*args, **kwargs): # super function
#     print(type(args)) # <class 'tuple'>
#     print(args) # (1, 2, 3, 'four', False, [1, 2, 3])
#     print(type(kwargs)) # <class 'dict'>
#     print(kwargs)
#     for i in args:
#         print(i)
#     return True

# # args_func(1,2,3,"four",False, [1,2,3])

# args_func(1,2,name="John")

# def kwargs_func(*args,**kwargs):
#     for i in args:
#         print(i, end="")
#     for k in kwargs.values():
#         print(k, end="")
#     return True

# kwargs_func(10,20,a=30,b=40)

# personal = [
#     {
#         "name":"John Doe",
#         "military":True
#     },
#     {
#         "name":"Sara Connor",
#         "military":False
#     },
#       {
#         "name":"Mike Tyson",
#         "military":True
#     },
#         {
#         "name":"Charli Chaplin",
#         "military":False
#     },
# ]
# def check_military_status(user_list):
#     result = []
#     for item in user_list:
#         if item.get("military"):
#             result.append(item)
#     return result
# r = check_military_status(personal)
# print(r)


# lambda - anonim function 

# x = lambda a,b : a + b
# print(x(2,2)) # 4

# def update_profile(**kwargs):
#     full_name = lambda name , surname: str(name) + " " + str(surname)
#     result_text = f"""\
#     name = {kwargs.get("name")}\n
#     surname = {kwargs.get("surname")}\n
#     age = {kwargs.get("age")}\n
#     full name = {full_name(kwargs.get("name"),kwargs.get("surname"))}
#     """
#     return result_text

# user = update_profile(name="John", surname="Doe", age=20)

# print(user)


# arr = [1,4,6,69,89,47,2,36,4,2,63,4,3,12,56,98]
# # res_arr = []
# print([x for x in arr if x > 50]) # [69, 89, 63, 56, 98]
# # for x in arr:
# #     if x > 50:
# #         res_arr.append(x)
# # print(res_arr) # [69, 89, 63, 56, 98]

# # print(filter(lambda x : x > 50, arr)) # <filter object at 0x00000259DAA23C70>
# res = list(filter(lambda x : x > 50, arr))
# print(res) # [69, 89, 63, 56, 98]


# function Generator
# def gen_func(a,b):
#     for i in range(1, a+1):
#         yield i ** b
# def main(x):
#     yield x
#     x = 10 
#     yield x 
# print(list(main(5))) # [5, 10]     
# print(gen_func) # <function gen_func at 0x000002051DA98A60>
# print(type(gen_func)) #<class 'function'>

# print(list(gen_func(10,2))) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
# print(tuple(gen_func(10,2))) # (1, 4, 9, 16, 25, 36, 49, 64, 81, 100)

# border-radius
# borderRadius

# border-top-left-radius
# borderTopLeftRadius


# decorators 
# def wrapper(f):
#     print(f"{f.__name__} - funktsiya ishga tushdi")
#     return f

# @wrapper
# def main():
#     print("Main func")

# main()

# request.user.is_authenticated() -> True 


# password = "1234"

# username = input("Usernamer \n")
# user_password = input("Password \n")

# def is_authenticated(func):
#     if user_password == password:
#         return func
#     else:
#         return lambda :"Authorization fail !"
    
    
# @is_authenticated
# def login():    
#     return f"Welcome back ! {username}"

# @is_authenticated
# def contact():
#     print("Welcome to contact page !")

# print(login())

 
# contact()   

# recursion 

# def recursion(x):
#     x -= 1
#     print(x)
#     if x < 0:
#         print("The end !")
#     else:
#         recursion(x)

# # recursion(100) # RecursionError
# recursion(10)

# import math
# print(math.factorial(5)) # 120
# print(math.factorial(6)) # 720

# 5 >> 120 
# 1*2*3*4*5 = 120


n = int(input("N ?>"))
factorial_num = 1
for i in range(1,n+1):
    factorial_num *= i

print(factorial_num) # 120



def factorial(n):
    if n == 0 or n == 1: return 1 
    else:
        return n * factorial(n - 1)









     